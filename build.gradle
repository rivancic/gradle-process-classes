import java.lang.reflect.Field
import java.nio.file.Files
import java.util.stream.Collectors

plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.4.32'
}

group 'com.rivancic'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib",
      'com.google.guava:guava:30.1.1-jre'
  api group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.37'
}

jar {
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

tasks.register("processClasses") {

  group = "process"
  description = "Process classes form a specific package"
  dependsOn tasks.named("assemble")
  doLast {

    // Instantiate classloader from jar as you will need other dependencies for loading classes
    File file = project.projectDir.toPath().resolve(jar.archiveFile.get().toString()).toFile()
    println("Packaged Kotlin project jar file: ${file}")
    ClassLoader classloader = new URLClassLoader([file.toURI().toURL()] as URL[])

    // Iterate through all of the class files in the specified package
    String packageToScan = packageToProcess.toString().replace(".",File.separator)
    java.nio.file.Path path = project.file("build/classes/kotlin/main/").toPath().resolve(packageToScan)
    List<Class> classesFromSpecificPackage = Files.walk(path)
        .filter({ Files.isRegularFile(it)})
        .map({
          return project.file("build/classes/kotlin/main/").toPath().relativize(it)
        })
        .map({ it.toString().substring(0, it.toString().lastIndexOf(".")).replace(File.separator, ".") })
        .map({
          // Load all classes
          try {
            println("Class = " + it)  // print class if necessary before loading it
            return classloader.loadClass(it)
          } catch (Throwable e) {
            println("Class could not be loaded:" + e.toString())
          }
        })
        .collect(Collectors.toList())

    // Do something with the classes form specific package
    // Now just basic information is printed directly to the console
    println("=======================================")
    println("Classes from package:  ${packageToScan}")
    println("")
    classesFromSpecificPackage.forEach({
      println("  Class: ${it.getCanonicalName()}")
      Field[] fields = it.getDeclaredFields()
      for (int i = 0; i < fields.length; i++) {
        println("  - Declared field: ${fields[i]}")
      }
      println("")
    })
    println("=======================================")
  }
}